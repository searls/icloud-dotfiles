#!/bin/bash

# Meant to be run via ~/Library/LaunchAgents/co.searls.justin.backup.plist
# Hence the hinky environment shit
export HOME="/Users/justin"
export PATH="$PATH:/usr/local/bin:/Library/Apple/usr/bin"
source "$HOME/.profile"

# Define a function that prepends the current timestamp to messages
function echo_with_timestamp() {
  # Format the timestamp as you like. Here, it's formatted as 'YYYY-MM-DD HH:MM:SS'
  local timestamp=$(date "+%Y-%m-%d %H:%M:%S")

  # $@ expands to all the parameters passed to the function, preserving both spaces and arguments
  echo "$timestamp $@"
}

# Function to send email using 'mail' command with logs
send_failure_email() {
  local command_name="$1"
  local log_file="$2"
  local logs=$(cat "$log_file") # Read the log file
  BODY="Backup process for ${command_name} failed. Please check the logs for more information.\n\nLogs:\n$logs"
  echo -e "$BODY" | sudo -u justin shortcuts run "send_automated_email"
}

# Function to run a backup task, check for failure, notify and include logs
run_backup_task() {
  local command_name="$1"
  local log_file=$(mktemp) # Create a temporary file for logs
  echo_with_timestamp "----> Running backup task: $command_name"

  # Execute the command and capture both stdout and stderr, while still displaying them
  $command_name 2>&1 | tee "$log_file"

  # Check the exit status of the command
  if [ "${PIPESTATUS[0]}" -ne 0 ]; then
    echo_with_timestamp "----> ❌ ${command_name} failed."
    send_failure_email "$command_name" "$log_file"
  else
    echo_with_timestamp "----> ✅ ${command_name} succeeded."
  fi

  rm -f "$log_file" # Cleanup: remove the temporary log file
}

run_backup_task "backup_grog"
run_backup_task "backup_to_ssd"

echo_with_timestamp "----> All backups completed."

