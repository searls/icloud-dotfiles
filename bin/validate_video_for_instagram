#!/usr/bin/env ruby

VALIDATIONS = {
  min_frame_rate: {
    spec: 23,
    command: (fps = ->(path) { `ffprobe -v error -select_streams v:0 -show_entries stream=r_frame_rate -of default=noprint_wrappers=1:nokey=1 #{path}`[/\A\w+/].to_i }),
    test: ->(path) { fps.call(path) >= 23 }
  },
  max_frame_rate: {
    spec: 60,
    command: fps,
    test: ->(path) { fps.call(path) <= 60 }
  },
  container: {
    spec: ["mov", "mp4"],
    command: ->(path) { `ffprobe -v error -show_entries format=format_name -of default=noprint_wrappers=1:nokey=1 #{path}`.strip.split(",") },
    test: ->(path) { ( `ffprobe -v error -show_entries format=format_name -of default=noprint_wrappers=1:nokey=1 #{path}`.strip.split(",") & ["mov", "mp4"] ).any? }
  },
  audio_codec: {
    spec: "aac",
    command: ->(path) { `ffprobe -v error -select_streams a:0 -show_entries stream=codec_name -of default=noprint_wrappers=1:nokey=1 #{path}`.strip },
    test: ->(path) { `ffprobe -v error -select_streams a:0 -show_entries stream=codec_name -of default=noprint_wrappers=1:nokey=1 #{path}`.strip == "aac" }
  },
  max_audio_sample_rate: {
    spec: 48,
    command: ->(path) { `ffprobe -v error -select_streams a:0 -show_entries stream=sample_rate -of default=noprint_wrappers=1:nokey=1 #{path}`.to_i / 1000.0 },
    test: ->(path) { `ffprobe -v error -select_streams a:0 -show_entries stream=sample_rate -of default=noprint_wrappers=1:nokey=1 #{path}`.to_i / 1000.0 <= 48 }
  },
  video_codecs: {
    spec: ["h264", "hevc"],
    command: ->(path) { `ffprobe -v error -select_streams v:0 -show_entries stream=codec_name -of default=noprint_wrappers=1:nokey=1 #{path}`.strip },
    test: ->(path) { ["h264", "hevc"].include?(`ffprobe -v error -select_streams v:0 -show_entries stream=codec_name -of default=noprint_wrappers=1:nokey=1 #{path}`.strip) }
  },
  color_space: {
    spec: "4:2:0",
    command: ->(path) {
      cs = `ffprobe -v error -select_streams v:0 -show_entries stream=pix_fmt -of default=noprint_wrappers=1:nokey=1 #{path}`.strip
      cs == "yuv420p" ? "4:2:0" : cs
    },
    test: ->(path) {
      cs = `ffprobe -v error -select_streams v:0 -show_entries stream=pix_fmt -of default=noprint_wrappers=1:nokey=1 #{path}`.strip
      (cs == "yuv420p" ? "4:2:0" : cs) == "4:2:0"
    }
  },
  horizontal_pixels: {
    spec: 1920,
    command: ->(path) { `ffprobe -v error -select_streams v:0 -show_entries stream=width -of default=noprint_wrappers=1:nokey=1 #{path}`.to_i },
    test: ->(path) { `ffprobe -v error -select_streams v:0 -show_entries stream=width -of default=noprint_wrappers=1:nokey=1 #{path}`.to_i == 1920 }
  },
  min_aspect_ratio: {
    spec: 0.01,
    command: ->(path) {
      w = `ffprobe -v error -select_streams v:0 -show_entries stream=width -of default=noprint_wrappers=1:nokey=1 #{path}`.to_f
      h = `ffprobe -v error -select_streams v:0 -show_entries stream=height -of default=noprint_wrappers=1:nokey=1 #{path}`.to_f
      w / h
    },
    test: ->(path) {
      w = `ffprobe -v error -select_streams v:0 -show_entries stream=width -of default=noprint_wrappers=1:nokey=1 #{path}`.to_f
      h = `ffprobe -v error -select_streams v:0 -show_entries stream=height -of default=noprint_wrappers=1:nokey=1 #{path}`.to_f
      (w / h) >= 0.01
    }
  },
  max_aspect_ratio: {
    spec: 10.0,
    command: ->(path) {
      w = `ffprobe -v error -select_streams v:0 -show_entries stream=width -of default=noprint_wrappers=1:nokey=1 #{path}`.to_f
      h = `ffprobe -v error -select_streams v:0 -show_entries stream=height -of default=noprint_wrappers=1:nokey=1 #{path}`.to_f
      w / h
    },
    test: ->(path) {
      w = `ffprobe -v error -select_streams v:0 -show_entries stream=width -of default=noprint_wrappers=1:nokey=1 #{path}`.to_f
      h = `ffprobe -v error -select_streams v:0 -show_entries stream=height -of default=noprint_wrappers=1:nokey=1 #{path}`.to_f
      (w / h) <= 10.0
    }
  },
  max_video_bitrate_mbps: {
    spec: 25,
    command: ->(path) { `ffprobe -v error -select_streams v:0 -show_entries stream=bit_rate -of default=noprint_wrappers=1:nokey=1 #{path}`.to_i / 1_000_000.0 },
    test: ->(path) { `ffprobe -v error -select_streams v:0 -show_entries stream=bit_rate -of default=noprint_wrappers=1:nokey=1 #{path}`.to_i / 1_000_000.0 <= 25 }
  },
  max_audio_bitrate_kbps: {
    spec: 128,
    command: ->(path) { `ffprobe -v error -select_streams a:0 -show_entries stream=bit_rate -of default=noprint_wrappers=1:nokey=1 #{path}`.to_i / 1000.0 },
    test: ->(path) { `ffprobe -v error -select_streams a:0 -show_entries stream=bit_rate -of default=noprint_wrappers=1:nokey=1 #{path}`.to_i / 1000.0 <= 128 }
  },
  min_duration_seconds: {
    spec: 3,
    command: ->(path) { `ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 #{path}`.to_f },
    test: ->(path) { `ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 #{path}`.to_f >= 3 }
  },
  max_duration_seconds: {
    spec: 900,
    command: ->(path) { `ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 #{path}`.to_f },
    test: ->(path) { `ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 #{path}`.to_f <= 900 }
  },
  max_size_megabytes: {
    spec: 300,
    command: ->(path) { File.size(path).to_f / 1_000_000.0 },
    test: ->(path) { File.size(path).to_f / 1_000_000.0 <= 300 }
  }
}

DOCS_URL = "https://developers.facebook.com/docs/instagram-platform/instagram-graph-api/reference/ig-user/media"

video_path = ARGV[0]
if video_path.empty?
  puts "Usage: #{$0} <video_path>"
  exit 1
end

puts "Validating video: #{video_path}\n\n"
results = VALIDATIONS.map do |spec, details|
  if details[:test].call(video_path)
    puts "✅ #{spec}"
    true
  else
    puts "❌ #{spec} - #{details[:spec]} required; got: #{details[:command].call(video_path)}"
    false
  end
end

if (error_count = results.count { |r| r == false }).zero?
  puts "\n✅ Video is valid for Instagram!"
else
  puts "\n❌ Video had #{error_count} error(s) preventing API upload to Instagram.\nDocs: #{DOCS_URL}"
end
